name: SonarQube scan

env:
  tags: 'github,actions,github-actions,cli'
  projectKey: 'demo:github-actions-cli'

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  # schedule:
  #  - cron: '17 0 * * 4'
jobs:
  scan:
    runs-on: ubuntu-latest
    #strategy:
    #  matrix:
    #    python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint bandit pytest coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      #- name: Lint with flake8
      #  run: |
      #    stop the build if there are Python syntax errors or undefined names
      #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #    exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #     run: |
      #       pytest
      - name: Run tests
        working-directory: .
        run: ./run_tests.sh
      - name: Run all linters
        working-directory: .
        run: ./run_linters.sh
      - name: Set tags
        run: |
          # Set project tags on the fly
          curl -X POST -u ${{secrets.SONAR_TOKEN}}: "${{secrets.SONAR_HOST_URL}}/api/project_tags/set?project=${{env.projectKey}}&tags=${{env.tags}}"
      - name: Fetch scanner cache
        uses: actions/cache@v1
        with:
          path: /github/workspace/.sonar/cache
          key: ${{runner.os}}-scanner-v3
          restore-keys: ${{runner.os}}-scanner-v3
      #- name: Analyze CLI comp
      #  uses: docker://sonarsource/sonar-scanner-cli:latest
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #  with:
      #    sonar.qualitygate.wait: false
      #    sonar.verbose: true
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
          SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}
        with:
          # projectBaseDir: app/src
          args: >
            -Dsonar.verbose=true
            -Dsonar.userHome=.

